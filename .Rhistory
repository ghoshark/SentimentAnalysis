install.packages("ggplot2")
install.packages("caret")
install.packages("party")
install.packages("rpart.plot")
install.packages("dplyr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("caret")
install.packages("rpart.plot")
install.packages("party")
install.packages("ggplot2")
#clear all objects
rm(list = ls())
install.packages("readr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rpart")
install.packages("lattice")
install.packages("rpart.plot")
install.packages("caret")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("party")
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(rpart)
library(lattice)
library(rpart.plot)
library(caret)
library(lubridate)
library(tools)
library(ggplot2)
library(party)
library(party)
#clear all objects
rm(list = ls())
rm(list = ls())
#read the incidents file
# we know that file has some missing values as "--" and "", so replacing them with NA while importing
incident <- read.csv("C:/Data_Science/Datasets/incidents.csv",header = TRUE, na.strings = c("--",""))
#str(incident)
#Remove spaces from column names
#names(incident)
make.names(names(incident))
#Filter out incidents that have not been resolved yet
incident <- incident[!is.na(incident$Resolved.At.GMT.), ]
#change GMT dates to correct formats
# this will convert all -- dates to NAs
incident$Occurred.At.GMT. <- as.POSIXct(incident$Occurred.At.GMT.,format="%B %d %Y %I:%M %p")
incident$First.Notification.GMT.<- as.POSIXct(incident$First.Notification.GMT.,format="%B %d %Y %I:%M %p")
incident$Resolved.At.GMT. <- as.POSIXct(incident$Resolved.At.GMT.,format="%B %d %Y %I:%M %p")
incident$RCA.Prepared.GMT. <- as.POSIXct(incident$RCA.Prepared.GMT.,format="%B %d %Y %I:%M %p")
incident$RCA.Final.Prepared.GMT. <- as.POSIXct(incident$RCA.Final.Prepared.GMT.,format="%B %d %Y %I:%M %p")
#change local dates to correct formats
# this will automatically convert all -- dates to NAs
incident$Occurred.At.Local. <- as.POSIXct(incident$Occurred.At.Local.,format="%B %d %Y %I:%M %p")
incident$First.Notification.Local.<- as.POSIXct(incident$First.Notification.Local.,format="%B %d %Y %I:%M %p")
incident$Resolved.At.Local. <- as.POSIXct(incident$Resolved.At.Local.,format="%B %d %Y %I:%M %p")
incident$RCA.Prepared.Local. <- as.POSIXct(incident$RCA.Prepared.Local.,format="%B %d %Y %I:%M %p")
incident$RCA.Final.Prepared.Local. <- as.POSIXct(incident$RCA.Final.Prepared.Local.,format="%B %d %Y %I:%M %p")
#handle missing date values(see if this is needed ?)
incident$RCA.Prepared.GMT. <- lapply(incident$RCA.Prepared.GMT.,function(x) gsub("--","0000-00-00 00:00:00",x)   )
#View(incident)
#Response Time : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them
incident$Response.Time.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Response.Time), sep = " ", as.is = TRUE)$V1))
incident$Response.Time.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Response.Time), sep = " ", as.is = TRUE)$V2))
incident$Response.Time <- (incident$Response.Time.hours * 60 + incident$Response.Time.mins)
#Incident Duration : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them
incident$Incident.Duration.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Incident.Duration), sep = " ", as.is = TRUE)$V1))
incident$Incident.Duration.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Incident.Duration), sep = " ", as.is = TRUE)$V2))
incident$Incident.Duration <- (incident$Incident.Duration.hours * 60 + incident$Incident.Duration.mins)
#Business Validated Downtime : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them together
incident$Business.Validated.Downtime.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Business.Validated.Downtime), sep = " ", as.is = TRUE)$V1))
incident$Business.Validated.Downtime.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Business.Validated.Downtime), sep = " ", as.is = TRUE)$V2))
incident$Business.Validated.Downtime <- (incident$Business.Validated.Downtime.hours * 60 + incident$Business.Validated.Downtime.mins)
#Drop columns we don't need
drop.cols <- c("Time.Zone","Occurred.At.Local.","First.Notification.Local.","Resolved.At.Local.","RCA.Prepared.Local.","RCA.Final.Prepared.Local.","RCAKPI.Days..Preliminary","RCAKPI.Days..Final","RCAKPI.Days..Preliminary.to.Final","Spice.Post.Time.s.")
incident <- incident[,!names(incident) %in% drop.cols]
#Drop columns in 2 stages for ease of use
drop.cols <- c("Response.Time.hours","Response.Time.mins","Incident.Duration.hours","Incident.Duration.mins","Business.Validated.Downtime.hours","Business.Validated.Downtime.mins")
incident <- incident[,!names(incident) %in% drop.cols]
# https://blog.learningtree.com/creating-web-service-in-r/
# https://www.opencpu.org/posts/scoring-engine/
#Calculate missing% for some columns ~ 77% missing
paste(100*sum(is.na(incident$Platforms))/length(incident$Platforms),"%",sep="")
paste(100*sum(is.na(incident$Domain))/length(incident$Domain),"%",sep="")
#Platfrom/Platfrom.Owners and Domain/Domain.Owners have very few values so ignoring these.
drop.cols <- c("Platforms","Platfrom.Owners","Domain.Owner","Domain","E2E.Capabilities")
incident <- incident[,!names(incident) %in% drop.cols]
#Change to characters
incident$Incident.Title <- as.character(incident$Incident.Title)
#Find outliers in Incident.Duration
quantile(incident$Incident.Duration)
summary(incident$Incident.Duration)
plot(incident$Incident.Duration)
boxplot(incident$Incident.Duration)
#Incident Number = INC000001249981 is the outlier
incident[incident$Incident.Duration > 100000,]
#Filter out this record from the dataset
incident <- incident[!incident$Incident.Duration > 100000,]
#Check quantile from 0% to 95% of the data
quantile(incident$Incident.Duration)
quantile(incident$Incident.Duration,probs = c(0,0.95))
#since 95% of data falls below 4789, we exclude remaining 93 records
incident <- incident[!incident$Incident.Duration > 4789,]
#Group the continuous variable into buckets
incident$Incident.Duration.Cat <- cut(incident$Incident.Duration,include.lowest = TRUE,breaks = quantile(incident$Incident.Duration,probs = (0:10)/10 ,na.rm = TRUE ),labels=c("A","B","C","D","E","F","G","H","I","J") )
incident$Incident.Duration.Cat <- as.factor(incident$Incident.Duration.Cat)
#Save the cleaned dataset
#check datatype of each column and if any list if found unlist it first.Otherwise write to csv wont work
sapply(incident,class)
incident$RCA.Prepared.GMT. <- unlist(incident$RCA.Prepared.GMT.)
write.csv(incident,file="incidents_cleaned.csv", row.names = TRUE)
#partition dataset into training and test datasets
#Option 1 to partition data
indexes = sample(1:nrow(incident), size=0.75*nrow(incident))
train <- incident[indexes,]
test <- incident[-indexes,]
#Decision Tree Model; Incident Status
#DT <- ctree(Incident.Duration.Cat ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries+Incident.Status+RCA.Status,data=train)
incident_model <- ctree(Incident.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train)
plot(incident_model)
print(summary(incident_model))
Incident.Status_p <- predict(incident_model, newdata = test)
result <- data.frame(test,Incident.Status_p)
xtab <- table(test$Incident.Status,Incident.Status_p)
confusionMatrix(xtab)
save(incident_model, file="incident_model.rda")
############################################3
#Decision Tree Model; RCA Status
rca_model <- ctree(RCA.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train)
#DT <- rpart(RCA.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train, method = "class", cp=0)
plot(rca_model)
print(summary(rca_model))
RCA.Status_p <- predict(rca_model, newdata = test)
result <- data.frame(test,RCA.Status_p)
xtab <- table(test$RCA.Status,RCA.Status_p)
confusionMatrix(xtab)
save(rca_model, file="rca_model.rda")
#clear all objects
rm(list = ls())
#clear all objects
rm(list = ls())
#clear all objects
rm(list = ls())
ls -rlt
df -k.
rm(list=ls())
load()
rm(list=ls())
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R"))
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA") )
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA") )
ls()
load(c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
load("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA")
load("incident_score.R")
ls()
load(file="incident_score.R")
ls9
ls()
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = .)
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:\Data_Science\R_workspace")
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",code_files = character("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",code_files = "incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",code_files = incident_score.R,incident_model.RDA,incidents.R,rca_model.RDA, path = "C:/Data_Science/R_workspace")
load("C:\Data_Science\R_workspace/incidents.R")
load("C:/Data_Science/R_workspace/incidents.R")
load("C:/Data_Science/R_workspace/incident.R")
load("C:/Data_Science/R_workspace/incidentsa.R")
load("C:/Data_Science/R_workspace/incidents.R")
load("C:/Data_Science/R_workspace/incidents.R")
load("C:/Data_Science/R_workspace/incident_model.rda")
rm(list=ls())
rm(ls())
package.skeleton(name="IncidentPredictor",list  = "incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace")
)
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace"))
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:\Data_Science\R_workspace"))
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace"))
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"))
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA", path = "C:/Data_Science/R_workspace"))
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
load("C:/Data_Science/R_workspace/incident_score.R")
rm(list=ls())
load("C:/Data_Science/R_workspace/incident_score.R")
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
install.packages("devtools")
library(devtools)
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",list  = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor",list c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor", c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor", list(c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
)
package.skeleton(name="IncidentPredictor", list("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
package.skeleton(name="IncidentPredictor", list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA"), path = "C:/Data_Science/R_workspace")
ls()
load("C:/Data_Science/R_workspace/incident_model.rda")
ls9
ls()
ls()
ls()
load("C:/Data_Science/R_workspace/incident_model.rda")
load("C:/Data_Science/R_workspace/incident_model/incidents.R")
ls()
load("C:/Data_Science/R_workspace/incidents.R")
ls()
ls()
rm(list=ls())
load("C:/Data_Science/R_workspace/incidents.R")
#Install Packages
install.packages("readr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("rpart")
install.packages("lattice")
install.packages("rpart.plot")
install.packages("caret")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("party")
#Load Libraries
#library(readr)
#library(tidyr)
#library(dplyr)
#library(ggplot2)
#library(rpart)
#library(lattice)
#library(rpart.plot)
#library(caret)
#library(lubridate)
#library(tools)
#library(ggplot2)
#library(party)
#clear all objects
rm(list = ls())
#read the incidents file
# we know that file has some missing values as "--" and "", so replacing them with NA while importing
incident <- read.csv("C:/Data_Science/Datasets/incidents.csv",header = TRUE, na.strings = c("--",""))
#str(incident)
#Remove spaces from column names
#names(incident)
make.names(names(incident))
#Filter out incidents that have not been resolved yet
incident <- incident[!is.na(incident$Resolved.At.GMT.), ]
#change GMT dates to correct formats
# this will convert all -- dates to NAs
incident$Occurred.At.GMT. <- as.POSIXct(incident$Occurred.At.GMT.,format="%B %d %Y %I:%M %p")
incident$First.Notification.GMT.<- as.POSIXct(incident$First.Notification.GMT.,format="%B %d %Y %I:%M %p")
incident$Resolved.At.GMT. <- as.POSIXct(incident$Resolved.At.GMT.,format="%B %d %Y %I:%M %p")
incident$RCA.Prepared.GMT. <- as.POSIXct(incident$RCA.Prepared.GMT.,format="%B %d %Y %I:%M %p")
incident$RCA.Final.Prepared.GMT. <- as.POSIXct(incident$RCA.Final.Prepared.GMT.,format="%B %d %Y %I:%M %p")
#change local dates to correct formats
# this will automatically convert all -- dates to NAs
incident$Occurred.At.Local. <- as.POSIXct(incident$Occurred.At.Local.,format="%B %d %Y %I:%M %p")
incident$First.Notification.Local.<- as.POSIXct(incident$First.Notification.Local.,format="%B %d %Y %I:%M %p")
incident$Resolved.At.Local. <- as.POSIXct(incident$Resolved.At.Local.,format="%B %d %Y %I:%M %p")
incident$RCA.Prepared.Local. <- as.POSIXct(incident$RCA.Prepared.Local.,format="%B %d %Y %I:%M %p")
incident$RCA.Final.Prepared.Local. <- as.POSIXct(incident$RCA.Final.Prepared.Local.,format="%B %d %Y %I:%M %p")
#handle missing date values(see if this is needed ?)
incident$RCA.Prepared.GMT. <- lapply(incident$RCA.Prepared.GMT.,function(x) gsub("--","0000-00-00 00:00:00",x)   )
#View(incident)
#Response Time : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them
incident$Response.Time.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Response.Time), sep = " ", as.is = TRUE)$V1))
incident$Response.Time.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Response.Time), sep = " ", as.is = TRUE)$V2))
incident$Response.Time <- (incident$Response.Time.hours * 60 + incident$Response.Time.mins)
#Incident Duration : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them
incident$Incident.Duration.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Incident.Duration), sep = " ", as.is = TRUE)$V1))
incident$Incident.Duration.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Incident.Duration), sep = " ", as.is = TRUE)$V2))
incident$Incident.Duration <- (incident$Incident.Duration.hours * 60 + incident$Incident.Duration.mins)
#Business Validated Downtime : Extract hours and minutes from "xxHrs yyMins" format
#Convert hours to minutes and add them together
incident$Business.Validated.Downtime.hours <- as.integer(gsub("Hrs","",read.table(text =as.character(incident$Business.Validated.Downtime), sep = " ", as.is = TRUE)$V1))
incident$Business.Validated.Downtime.mins <- as.integer(gsub("Mins","",read.table(text =as.character(incident$Business.Validated.Downtime), sep = " ", as.is = TRUE)$V2))
incident$Business.Validated.Downtime <- (incident$Business.Validated.Downtime.hours * 60 + incident$Business.Validated.Downtime.mins)
#Drop columns we don't need
drop.cols <- c("Time.Zone","Occurred.At.Local.","First.Notification.Local.","Resolved.At.Local.","RCA.Prepared.Local.","RCA.Final.Prepared.Local.","RCAKPI.Days..Preliminary","RCAKPI.Days..Final","RCAKPI.Days..Preliminary.to.Final","Spice.Post.Time.s.")
incident <- incident[,!names(incident) %in% drop.cols]
#Drop columns in 2 stages for ease of use
drop.cols <- c("Response.Time.hours","Response.Time.mins","Incident.Duration.hours","Incident.Duration.mins","Business.Validated.Downtime.hours","Business.Validated.Downtime.mins")
incident <- incident[,!names(incident) %in% drop.cols]
# https://blog.learningtree.com/creating-web-service-in-r/
# https://www.opencpu.org/posts/scoring-engine/
#Calculate missing% for some columns ~ 77% missing
paste(100*sum(is.na(incident$Platforms))/length(incident$Platforms),"%",sep="")
paste(100*sum(is.na(incident$Domain))/length(incident$Domain),"%",sep="")
#Platfrom/Platfrom.Owners and Domain/Domain.Owners have very few values so ignoring these.
drop.cols <- c("Platforms","Platfrom.Owners","Domain.Owner","Domain","E2E.Capabilities")
incident <- incident[,!names(incident) %in% drop.cols]
#Change to characters
incident$Incident.Title <- as.character(incident$Incident.Title)
#Find outliers in Incident.Duration
quantile(incident$Incident.Duration)
summary(incident$Incident.Duration)
plot(incident$Incident.Duration)
boxplot(incident$Incident.Duration)
#Incident Number = INC000001249981 is the outlier
incident[incident$Incident.Duration > 100000,]
#Filter out this record from the dataset
incident <- incident[!incident$Incident.Duration > 100000,]
#Check quantile from 0% to 95% of the data
quantile(incident$Incident.Duration)
quantile(incident$Incident.Duration,probs = c(0,0.95))
#since 95% of data falls below 4789, we exclude remaining 93 records
incident <- incident[!incident$Incident.Duration > 4789,]
#Group the continuous variable into buckets
incident$Incident.Duration.Cat <- cut(incident$Incident.Duration,include.lowest = TRUE,breaks = quantile(incident$Incident.Duration,probs = (0:10)/10 ,na.rm = TRUE ),labels=c("A","B","C","D","E","F","G","H","I","J") )
incident$Incident.Duration.Cat <- as.factor(incident$Incident.Duration.Cat)
#Save the cleaned dataset
#check datatype of each column and if any list if found unlist it first.Otherwise write to csv wont work
sapply(incident,class)
incident$RCA.Prepared.GMT. <- unlist(incident$RCA.Prepared.GMT.)
write.csv(incident,file="incidents_cleaned.csv", row.names = TRUE)
#partition dataset into training and test datasets
#Option 1 to partition data
indexes = sample(1:nrow(incident), size=0.75*nrow(incident))
train <- incident[indexes,]
test <- incident[-indexes,]
#Decision Tree Model; Incident Status
#DT <- ctree(Incident.Duration.Cat ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries+Incident.Status+RCA.Status,data=train)
incident_model <- ctree(Incident.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train)
plot(incident_model)
print(summary(incident_model))
Incident.Status_p <- predict(incident_model, newdata = test)
result <- data.frame(test,Incident.Status_p)
xtab <- table(test$Incident.Status,Incident.Status_p)
confusionMatrix(xtab)
save(incident_model, file="incident_model.rda")
############################################3
#Decision Tree Model; RCA Status
rca_model <- ctree(RCA.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train)
#DT <- rpart(RCA.Status ~ Application.Type+Application+Sub.Group+Group+Impacted.Countries, data=train, method = "class", cp=0)
plot(rca_model)
print(summary(rca_model))
RCA.Status_p <- predict(rca_model, newdata = test)
result <- data.frame(test,RCA.Status_p)
xtab <- table(test$RCA.Status,RCA.Status_p)
confusionMatrix(xtab)
save(rca_model, file="rca_model.rda")
cwd
cwd()
ls()
rm(list=ls9)
rm(list=ls())
ls()
package.skeleton(name="IncidentPredictor",code_files = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA") )
package.skeleton(name="IncidentPredictor",list = c("incident_score.R","incident_model.RDA","incidents.R","rca_model.RDA") )
package.skeleton(name="IncidentPredictor",list = c('incident_score.R',"incident_model.RDA","incidents.R","rca_model.RDA") )
package.skeleton(name="IncidentPredictor",list = c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
package.skeleton(name="IncidentPredictor",list = c(incident_score.R,'incident_model.RDA','incidents.R','rca_model.RDA') )
package.skeleton(name="IncidentPredictor",list = c('C:/Data_Science/R_workspace/incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
package.skeleton(name="IncidentPredictor")
package.skeleton(name="IncidentPredictor",list = c('C:/Data_Science/R_workspace/incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
package.skeleton(name="IncidentPredictor",list = c(incident_score.R,'incident_model.RDA','incidents.R','rca_model.RDA') )
ls()
load("incidents.R")
load("C:/Data_Science/R_workspace/incident_score.R")
load("C:/Data_Science/R_workspace/incident_model.rda")
ls()
rm(list=ls9)
rm(list=ls()
)
devtools::create(name="IncidentPredictor",list = c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create(name="IncidentPredictor",list = c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create("IncidentPredictor",list = c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create(name="IncidentPredictor",c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create("IncidentPredictor",c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create("IncidentPredictor",listc('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
library(devtools)
devtools::create("IncidentPredictor",listc('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create("IncidentPredictor",list =c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
devtools::create("IncidentPredictor")
devtools::create("IncidentPredictor")
devtools::load_all("IncidentPredictor")
devtools::use_data()
devtools::use_package("tidyr")
devtools::use_package("tidyr")
package.skeleton(name="IncidentPredictor",list = c('incident_score.R','incident_model.RDA','incidents.R','rca_model.RDA') )
rm(list=ls())
devtools::build()
devtools::build()
IncidentPredictor::incident_score(mydata)
date()
time()
sentiments
sentiments
library(SentimentAnalysis)
SentimentAnalysis::analyzeSentiment(eis$Notes)
library(SentimentAnalysis)
SentimentAnalysis::analyzeSentiment(eis$Notes)
eis <- readxl::read_xlsx("C:/Data_Science/Text_Analysis/IPO_R&D_Raw.xlsx",sheet = "EIS Raw Data", col_names = TRUE)
sentiment <- SentimentAnalysis::analyzeSentiment(eis$Notes)
sentiment
plot(sentiment)
plot(eis$`Incident ID*+` sentiment)
plot(eis$`Incident ID*+` ,sentiment)
plot(eis$`Last Resolved Date`, sentiment)
eis$`Last Resolved Date`
eis$`Last Resolved Date`
View(eis)
table(sentiment)
nrow(sentiment)
nrow(eis)
nrow(eis$`Incident ID*+`)
nrow(eis$`Incident ID`)
nrow(eis$`Incident ID*+`)
nrow(eis$`Submit Date`)
install.packages("PLUMBER")
y
install.packages("plumber")
library(plumber)
library(plumber)
r <- plumb("test_plumber.R")
r <- plumb("R\test_plumber.R")
r <- plumb("R/test_plumber.R")
r <- plumb("R\test_plumber.R")
r <- plumber::plumb(R\test_plumber.R)
r <- plumber::plumb("R\test_plumber.R")
r <- plumber::plumb("test_plumber.R")
r <- plumber::plumb("C:\Data_Science\Text_Analysis\TextAnalytics\Rtest_plumber.R")
r <- plumber::plumb("C:/Data_Science/Text_Analysis/TextAnalytics/Rtest_plumber.R")
r <- plumber::plumb("plumber.R")
r <- plumber::plumb("R/plumber.R")
r <- plumber::plumb("R\plumber.R")
r <- plumber::plumb("R/plumber.R")
file = "plumber.R"
r <- plumber::plumb(file)
for (i in 1:nrow(survey))
{
survey$Survey.Comment[i] <- mytranslate(api_key,survey$Survey.Comment[i],"en")[2]
}
# df <- readLines(inFile$datapath)
#   survey <- readxl::read_xlsx(inFile$datapath,sheet = "Survey Raw data", col_names = TRUE)
survey <- readxl::read_xlsx("C:/Data_Science/SentimentAnalysis/raw_data.xlsx",sheet = "Survey Raw data", col_names = TRUE)
names(survey) <- make.names(names(survey))
#Change to character format. Replace NAs by blank spaces and normalize thank to thanks.
survey$Survey.Comment <- as.character(survey$Survey.Comment)
survey$Survey.Comment <- ifelse(is.na(survey$Survey.Comment), ' ', survey$Survey.Comment)
survey$Survey.Comment <- gsub('thank','thanks',survey$Survey.Comment)
#Remove illegal characters
survey$Survey.Comment <- iconv(survey$Survey.Comment, to = "ASCII//TRANSLIT")
survey$Survey.Comment <- gsub("[[:punct:]]", "", survey$Survey.Comment)
survey$Survey.Comment <- gsub("[\r\n]", " ", survey$Survey.Comment)
# Get the API key for RYandexTranslate package
api_key="trnsl.1.1.20180511T085510Z.e725eb61f4983e91.e6689ac166687e78cd6b2c4667701661c9da9bad"
for (i in 1:nrow(survey))
{
survey$Survey.Comment[i] <- mytranslate(api_key,survey$Survey.Comment[i],"en")[2]
}
source("C:/Data_Science/SentimentAnalysis/mytranslate.R")
for (i in 1:nrow(survey))
{
survey$Survey.Comment[i] <- mytranslate(api_key,survey$Survey.Comment[i],"en")[2]
}
# Get the API key for RYandexTranslate package
api_key="trnsl.1.1.20180511T085510Z.e725eb61f4983e91.e6689ac166687e78cd6b2c4667701661c9da9bad"
# Get the API key for RYandexTranslate package
api_key="trnsl.1.1.20180511T085510Z.e725eb61f4983e91.e6689ac166687e78cd6b2c4667701661c9da9bad"
for (i in 1:nrow(survey))
{
survey$Survey.Comment[i] <- mytranslate(api_key,survey$Survey.Comment[i],"en")[2]
}
# Get the API key for RYandexTranslate package
api_key="trnsl.1.1.20180515T075745Z.d56a1359d70f1656.7bbbdf3d79963eab0b58c11dcee8155da0e1c604"
# Get the API key for RYandexTranslate package
api_key="trnsl.1.1.20180515T075745Z.d56a1359d70f1656.7bbbdf3d79963eab0b58c11dcee8155da0e1c604"
for (i in 1:nrow(survey))
{
su
))
for (i in 1:nrow(survey))
{
survey$Survey.Comment[i] <- mytranslate(api_key,survey$Survey.Comment[i],"en")[2]
}
shiny::runApp('C:/Data_Science/SentimentAnalysis')
getwd()
getwd()
#source("C:/Data_Science/SentimentAnalysis/mytranslate.R")
source("mytranslate.R")
#source("C:/Data_Science/SentimentAnalysis/mytranslate.R")
source("mytranslate.R")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ghoshark', token='896C8D3AF9422BBE6D1522B7B57FDE6B', secret='EpwCz7Dv3+mGsPfLrsnh3pCzt4LZzs5GFjI3eUEi')
library(rsconnect)
rsconnect::deployApp("C:/Data_Science/SentimentAnalysis")
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
